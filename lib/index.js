'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&'function'==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?'symbol':typeof obj},typeOfCheck=function typeOfCheck(a){return null!==a&&'object'==('undefined'==typeof a?'undefined':_typeof(a))};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}// takes 2 arrays to merge together
var immutableConcat=exports.immutableConcat=function immutableConcat(a,b){if(Array.isArray(a)&&Array.isArray(b))return[].concat(_toConsumableArray(a),_toConsumableArray(b));throw new Error('immutableConcat: Both arguments need to be arrays')};// takes the array and an item to add
var immutablePush=exports.immutablePush=function immutablePush(a,b){if(Array.isArray(a))return[].concat(_toConsumableArray(a),[b]);throw new Error('immutablePush: First argument needs to be an array')};// takes the array and the index of the item to remove
var immutableRemove=exports.immutableRemove=function immutableRemove(a,b){if(Array.isArray(a))return[].concat(_toConsumableArray(a.slice(0,parseInt(b))),_toConsumableArray(a.slice(parseInt(b)+1)));throw new Error('immutableRemove: First argument needs to be an array')};// merges two objects second object overides first
var immutableMerge=exports.immutableMerge=function immutableMerge(a,b){if(typeOfCheck(a)&&typeOfCheck(b))return _extends({},a,b);throw new Error('immutableMerge: Both arguments need to be objects')};// merges an array of objects from left to right
// meaning the ones on the right take presidence
var immutableMergeMany=exports.immutableMergeMany=function immutableMergeMany(a){if(Array.isArray(a))return a.reduce(function(b,c){return immutableMerge(b,c)},{});throw new Error('immutableMergeMany: Argument needs to be an array')};// takes the array, object and (optional) key returns a new array with object updated
var immutableUpdateObjectByKey=exports.immutableUpdateObjectByKey=function immutableUpdateObjectByKey(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:'id';if(Array.isArray(a)){if(typeOfCheck(b))return a.map(function(d){return d[c]===b[c]?immutableMerge(d,b):d});throw new Error('immutableUpdateObjectByKey: Second argument needs to be an object')}throw new Error('immutableUpdateObjectByKey: First argument needs to be an array')};